version: '3.5'

services:
    go-app:
      build:
        context: ../..
        dockerfile: deployments/development/Dockerfile
      restart: unless-stopped
      networks:
        - development
      ports:
        - ${APPLICATION_PORT}:${APPLICATION_PORT}
      volumes:
        - .:/go/src/app
      env_file:
        - .env
      depends_on:
        - postgres

    postgres:
      restart: always
      image: postgres:13.1-alpine
      env_file:
        - .env
      ports:
        - ${DB_PORT}:${DB_PORT}
      volumes:
        - ./postgres/data:/var/lib/postgresql/data
        - ./postgres/backups:/backups
        - ./postgresql.conf:/etc/postgresql/postgresql.conf
      environment:
        POSTGRES_PASSWORD: postgres
      networks:
        - development


    zookeeper-1:
      image: confluentinc/cp-zookeeper:latest
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - "22181:2181"

    broker:
      image: confluentinc/cp-kafka:7.5.0
      container_name: broker_cp
      ports:
        - "9093:9093"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_NODE_ID: 1
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
        KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
        CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

      networks:
        - development

    prometheus:
      image: prom/prometheus:v2.49.1
      container_name: prometheus
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
      ports:
        - "9090:9090"
      restart: unless-stopped
      volumes:
        - ./prometheus:/etc/prometheus
        #- ./prometheus/prom_data:/prometheus
      depends_on:
        - broker


    grafana:
      container_name: grafana_cp
      image: grafana/grafana:10.3.1
      user: root
      restart: always
      environment:
        GF_INSTALL_PLUGINS: 'grafana-piechart-panel'
      ports:
        - "3005:3005"
      volumes:
        - ./grafana/data:/var/lib/grafana
        - ./grafana/provisioning/:/etc/grafana/provisioning/
      depends_on:
        - prometheus

    s3:
      image: quay.io/minio/minio:RELEASE.2022-08-13T21-54-44Z
      command: minio server /data
      ports:
        - "9000:9000"
      environment:
        MINIO_ROOT_USER: minio
        MINIO_ROOT_PASSWORD: minio123
        MINIO_ACCESS_KEY: minio_access_key
        MINIO_SECRET_KEY: minio_secret_key
      restart: always
      networks:
        - development

networks:
  development:
    driver: bridge
    name: development